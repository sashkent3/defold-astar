local map_width = 5
local map_height = 4
local direction = astar.DIRECTION_EIGHT
local allocate = map_width * map_height
local typical_adjacent = map_width * map_height
local cache = true      -- Optional. Default is true
local use_zero = false  -- Optional. Default is false = 1 based
local map_vflip = false -- Optional. Default is false
local world = {
	2, 0, 0, 0, 0,
	0, 0, 0, 0, 0,
	0, 0, 1, 3, 0,
	1, 0, 0, 0, 2,
}
local costs = {
	[0] = {
		1.0, -- E
		1.0, -- N
		1.0, -- W
		1.0, -- S
		1.41, -- NE
		1.41, -- NW
		1.41, -- SW
		1.41 -- SE
	}
}

local entities = {
	1
}

local map_id = "123"

function init(self)
	astar.setup(map_id, map_width, map_height, direction, allocate, typical_adjacent, cache, use_zero, map_vflip)
	astar.set_map(map_id, world)
	astar.set_costs(map_id, costs)
	astar.set_entities(map_id, entities)
	astar.use_entities(map_id, true)
	astar.print_map(map_id)

	local status, size, total_cost, path = astar.solve(map_id, 5, 1, 1, 4)

	if status == astar.SOLVED then
		print("PATH SOLVED")
		print("Path Size", size)
		print("Total Cost:", total_cost)

		for _, tile in ipairs(path) do
			print("tile x:", tile.x, "tile y: ", tile.y, "tile ID: ", tile.id)
		end
	elseif status == astar.NO_SOLUTION then
		print("NO_SOLUTION")
	elseif status == astar.START_END_SAME then
		print("START_END_SAME")
	end

	astar.use_entities(map_id, false)

	local near_status, near_size, nears = astar.solve_near(map_id, 3, 4, 1.0)

	if near_status == astar.SOLVED then
		print("NEAR SOLVED")
		print("Near Size:", near_size)

		for _, tile in ipairs(nears) do
			print("tile x:", tile.x, "tile y: ", tile.y, "tile ID: ", tile.id)
		end
	elseif near_status == astar.NO_SOLUTION then
		print("NO_SOLUTION")
	elseif near_status == astar.START_END_SAME then
		print("START_END_SAME")
	end
end
