local data = require('main.data')

local world = data.near_world1
local world2 = data.near_world2
local world3 = data.near_world3

local costs = {
    [0] = {
        1.0,  -- E
        1.0,  -- N
        1.0,  -- W
        1.0,  -- S
        1.41, -- NE
        1.41, -- NW
        1.41, -- SW
        1.41  -- SE
    }
}

local map_width = 5
local map_height = 5
local direction = astar.DIRECTION_EIGHT
local allocate = map_width * map_height
local typical_adjacent = 8
local cache = true

local start_x = 0
local start_y = 0

local function result(near_size, near_result, nears)
    print("near_size:", near_size)

    if near_result == astar.SOLVED then
        print("SOLVED")
        for i, v in ipairs(nears) do
            print("Tile: ", v.x .. "-" .. v.y)
        end
    elseif near_result == astar.NO_SOLUTION then
        print("NO_SOLUTION")
    elseif near_result == astar.START_END_SAME then
        print("START_END_SAME")
    end
end

function init(self)
    astar.reset()
    astar.reset_cache()

    -- ***************************** --
    -- * Initial reset empty cache * --
    -- ***************************** --

    astar.reset_cache()

    astar.setup(map_width, map_height, direction, allocate, typical_adjacent, cache)
    astar.set_map(world)
    astar.set_costs(costs)

    local near_result, near_size, nears = astar.solve_near(start_x, start_y, 1.5)
    result(near_size, near_result, nears)

    -- ***************************** --
    -- *    Without Reset cache    * --
    -- ***************************** --
    print("--------------------------")

    -- Same w-h. No need to astar.setup.
    -- It is closed. Should return NO_SOLUTION
    astar.set_map(world2)
    local near_result, near_size, nears = astar.solve_near(start_x, start_y, 1.5)
    result(near_size, near_result, nears)

    -- ***************************** --
    -- *        Reset cache        * --
    -- ***************************** --
    print("--------------------------")

    astar.reset_cache()

    -- Same w-h. No need to astar.setup.
    -- It is closed. Should return NO_SOLUTION
    astar.set_map(world2)
    local near_result, near_size, nears = astar.solve_near(start_x, start_y, 1.5)
    result(near_size, near_result, nears)

    -- ***************************** --
    -- *         Hard Reset        * --
    -- ***************************** --
    print("--------------------------")

    astar.reset()

    map_width = 6
    map_height = 6
    allocate = map_width * map_height
    astar.setup(map_width, map_height, direction, allocate, typical_adjacent, cache)

    -- Since reset() delete the costs array, returns error. This is expected. You have to astar.set_costs(costs) after reset()
    -- Word/Map is filled with 0 on setup()
    local near_result, near_size, nears = astar.solve_near(5, 5, 1.5)
    result(near_size, near_result, nears)

    -- ***************************** --
    -- *        Reset cache        * --
    -- ***************************** --
    print("--------------------------")

    astar.reset()

    astar.setup(map_width, map_height, direction, allocate, typical_adjacent, cache)
    astar.set_map(world3)
    astar.set_costs(costs)
    local near_result, near_size, nears = astar.solve_near(5, 5, 1.5)
    result(near_size, near_result, nears)

    -- ***************************** --
    -- *    Without Reset cache    * --
    -- ***************************** --
    print("--------------------------")

    map_width = 5
    map_height = 5
    allocate = map_width * map_height
    astar.setup(map_width, map_height, direction, allocate, typical_adjacent, cache)
    astar.set_map(world)
    astar.set_costs(costs)

    local near_result, near_size, nears = astar.solve_near(start_x, start_y, 1.5)
    result(near_size, near_result, nears)
end
